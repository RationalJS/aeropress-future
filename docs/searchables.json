[{"href": "./index.html", "title": "Home", "contents": "If you use vscode, Press Windows + Shift + B it will build automatically", "rendered": "If you use <code>vscode</code>, Press <code>Windows + Shift + B</code> it will build automatically", "breadcrumb": "Home"},
{"href": "./index.html#Editor", "title": "Editor", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "npm test", "rendered": "<pre><code>npm test</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Test", "title": "Test", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "npm run start", "rendered": "<pre><code>npm run start</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Build---Watch", "title": "Build + Watch", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "npm run build", "rendered": "<pre><code>npm run build</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Build", "title": "Build", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html#TODO", "title": "TODO", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "See error-handling for several strategies that you may employ.", "rendered": "See <a href=\"http://keleshev.com/composable-error-handling-in-ocaml\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Composible Error Handling in OCaml</a> for several strategies that you may employ.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "/*\n  This error handler is super simple; you will probably want\n  to write something more sophisticated in your app.\n*/\nlet handleError = Js.String.make;\n\nJs.Promise.resolve(\"some value\")\n|. FutureJs.fromPromise(handleError)\n|. Future.mapOk(value => Js.log2(\"It worked!\", value))\n|. Future.mapError(err => Js.log2(\"uh on\", err));", "rendered": "<pre><code>/*\n  This error handler is super simple; you will probably want\n  to write something more sophisticated in your app.\n*/\nlet handleError = Js.String.make;\n\nJs.Promise.resolve(\"some value\")\n|. FutureJs.fromPromise(handleError)\n|. Future.mapOk(value => Js.log2(\"It worked!\", value))\n|. Future.mapError(err => Js.log2(\"uh on\", err));</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Example use:", "rendered": "Example use:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Convenience functions for interop with JavaScript land.", "rendered": "Convenience functions for interop with JavaScript land.", "breadcrumb": "Home"},
{"href": "./index.html#FutureJs", "title": "FutureJs", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "The following are more situational:", "rendered": "The following are more situational:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Note 2: The terms Result.Ok and Result.Error in this context are expected to be read as Belt.Result.Ok and Belt.Result.Error.", "rendered": "<strong>Note 2</strong>: The terms <code>Result.Ok</code> and <code>Result.Error</code> in this context are expected to be read as <code>Belt.Result.Ok</code> and <code>Belt.Result.Error</code>.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Convenience functions when working with a future Belt.Result. Note: _ represents the future itself as inserted by |. (the fast pipe operator).", "rendered": "Convenience functions when working with a future <code>Belt.Result</code>. <strong>Note:</strong> <code>_</code> represents the future itself as inserted by <code>|.</code> (the <a href=\"https://bucklescript.github.io/docs/en/fast-pipe.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">fast pipe</a> operator).", "breadcrumb": "Home"},
{"href": "./index.html#Belt.Result", "title": "Belt.Result", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Core functions. Note: _ represents the future itself as inserted by |. (the fast pipe operator).", "rendered": "Core functions. <strong>Note:</strong> <code>_</code> represents the future itself as inserted by <code>|.</code> (the <a href=\"https://bucklescript.github.io/docs/en/fast-pipe.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">fast pipe</a> operator).", "breadcrumb": "Home"},
{"href": "./index.html#API", "title": "API", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let futureNum = Future.value(50);\n\nlet ft_a = futureNum |. Future.map(n => Future.value(n + 10));\nlet ft_b = futureNum |. Future.flatMap(n => Future.value(n + 20));\n\n/* ft_a has type future(future(int)) – probably not what you want. */\n/* ft_b has type future(int) */", "rendered": "<pre><code>let futureNum = Future.value(50);\n\nlet ft_a = futureNum |. Future.map(n => Future.value(n + 10));\nlet ft_b = futureNum |. Future.flatMap(n => Future.value(n + 20));\n\n/* ft_a has type future(future(int)) – probably not what you want. */\n/* ft_b has type future(int) */</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "And finally, if you map a future and return another future, you probably want to flatMap instead:", "rendered": "And finally, if you <code>map</code> a future and return <strong>another</strong> future, you probably want to <code>flatMap</code> instead:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "/* Shortcut for: let future_A = Future.make(resolve => resolve(99)); */\nlet future_A = Future.value(99);\n\nlet future_B = future_A |. Future.map(n => n + 1);\n\n\nfuture_A\n|. Future.get(n => Js.log(n)); /* logs: 99 */\n\nfuture_B\n|. Future.get(n => Js.log(n)); /* logs: 100 */", "rendered": "<pre><code>/* Shortcut for: let future_A = Future.make(resolve => resolve(99)); */\nlet future_A = Future.value(99);\n\nlet future_B = future_A |. Future.map(n => n + 1);\n\n\nfuture_A\n|. Future.get(n => Js.log(n)); /* logs: 99 */\n\nfuture_B\n|. Future.get(n => Js.log(n)); /* logs: 100 */</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Future.get only retrieves the future value. If you want to transform it to a different value, then you should use Future.map:", "rendered": "<code>Future.get</code> only <em>retrieves</em> the future value. If you want to <strong>transform</strong> it to a <em>different</em> value, then you should use <code>Future.map</code>:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let futureGreeting = Future.make(resolve => resolve(\"hi\"));\nfutureGreeting\n|. Future.get(x => Js.log(\"Got value: \" ++ x));\n\n/* Alternatively: */\n\nFuture.make(resolve => resolve(\"hi\"))\n|. Future.get(x => Js.log(\"Got value: \" ++ x));", "rendered": "<pre><code>let futureGreeting = Future.make(resolve => resolve(\"hi\"));\nfutureGreeting\n|. Future.get(x => Js.log(\"Got value: \" ++ x));\n\n/* Alternatively: */\n\nFuture.make(resolve => resolve(\"hi\"))\n|. Future.get(x => Js.log(\"Got value: \" ++ x));</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "To get the value of a future, use Future.get:", "rendered": "To get the value of a future, use <code>Future.get</code>:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "let futureGreeting = Future.make(resolve => resolve(\"hi\"));", "rendered": "<pre><code>let futureGreeting = Future.make(resolve => resolve(\"hi\"));</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "To create a task, use Future.make. It provides a single resolve function, like a promise with no reject:", "rendered": "To create a task, use <code>Future.make</code>. It provides a single <code>resolve</code> function, like a promise with no <code>reject</code>:", "breadcrumb": "Home"},
{"href": "./index.html#Basic-Usage", "title": "Basic Usage", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "{\n  ...\n  \"bs-dependencies\": [\n    \"reason-future\"\n  ]\n}", "rendered": "<pre><code>{\n  ...\n  \"bs-dependencies\": [\n    \"reason-future\"\n  ]\n}</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Then add &quot;reason-future&quot; to your bsconfig.json dev dependencies:", "rendered": "Then add <code>&quot;reason-future&quot;</code> to your <code>bsconfig.json</code> dev dependencies:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "$ npm install --save reason-future", "rendered": "<pre><code>$ npm install --save reason-future</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "First make sure you have bs-platform &gt;= 3.1.0. Then install with npm:", "rendered": "First make sure you have bs-platform <code>&gt;= 3.1.0</code>. Then install with npm:", "breadcrumb": "Home"},
{"href": "./index.html#Installation", "title": "Installation", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Compared to a promise, a future is:", "rendered": "Compared to a promise, a future is:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Future is a Js.Promise alternative. It is written in ReasonML.", "rendered": "Future is a <code>Js.Promise</code> alternative. It is written in ReasonML.", "breadcrumb": "Home"},
{"href": "./index.html#The-Future-is-Now", "title": "The Future is Now", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "npm\nBuild Status", "rendered": "<a href=\"https://www.npmjs.com/package/reason-future\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><img src='https://img.shields.io/npm/v/reason-future.svg' alt='npm' /></a>\n<a href=\"https://travis-ci.org/RationalJS/future\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><img src='https://travis-ci.org/RationalJS/future.svg?branch=master' alt='Build Status' /></a>", "breadcrumb": "Home"},
{"href": "./api/FutureResult.html#value-tapError", "title": "tapError", "contents": "tapError Future t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let tapError: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => 'a\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-tapOk", "title": "tapOk", "contents": "tapOk Future t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let tapOk: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => 'a\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-flatMapError", "title": "flatMapError", "contents": "flatMapError Future t Js Result t Future t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let flatMapError: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-mapError", "title": "mapError", "contents": "mapError Future t Js Result t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let mapError: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => Js.Result.t('a, 'a)\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-flatMapOk", "title": "flatMapOk", "contents": "flatMapOk Future t Js Result t Future t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let flatMapOk: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-mapOk", "title": "mapOk", "contents": "mapOk Future t Js Result t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let mapOk: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => Js.Result.t('a, 'a)\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-deprecate", "title": "deprecate", "contents": "deprecate Future t string string Future t   ", "rendered": "<h4 class='item'>let deprecate: (<a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>('a), string, string) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(\n  'a\n)</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html", "title": "FutureResult", "contents": "@rest", "rendered": "@rest", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html", "title": "FutureResult", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#FutureResult", "title": "FutureResult", "contents": "", "rendered": "", "breadcrumb": "FutureResult"},
{"href": "./api/FutureJs.html#value-fromPromise", "title": "fromPromise", "contents": "fromPromise Js Promise t Js Promise error  Future t Belt Result t  ", "rendered": "<h4 class='item'>let fromPromise: (\n  Js.Promise.t('a),\n  Js.Promise.error => 'a\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a))</h4>", "breadcrumb": "FutureJs"},
{"href": "./api/FutureJs.html", "title": "FutureJs", "contents": "@rest", "rendered": "@rest", "breadcrumb": "FutureJs"},
{"href": "./api/FutureJs.html", "title": "FutureJs", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "FutureJs"},
{"href": "./api/FutureJs.html#FutureJs", "title": "FutureJs", "contents": "", "rendered": "", "breadcrumb": "FutureJs"},
{"href": "./api/Future.html#value-tapError", "title": "tapError", "contents": "tapError t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let tapError: (<a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)), 'a => 'a) => <a href=\"./api/Future.html#type-t\">t</a>(\n  Belt.Result.t('a, 'a)\n)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-tapOk", "title": "tapOk", "contents": "tapOk t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let tapOk: (<a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)), 'a => 'a) => <a href=\"./api/Future.html#type-t\">t</a>(\n  Belt.Result.t('a, 'a)\n)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-flatMapError", "title": "flatMapError", "contents": "flatMapError t Belt Result t t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let flatMapError: (\n  <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)),\n  'a => <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a))\n) => <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a))</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-flatMapOk", "title": "flatMapOk", "contents": "flatMapOk t Belt Result t t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let flatMapOk: (\n  <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)),\n  'a => <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a))\n) => <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a))</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-mapError", "title": "mapError", "contents": "mapError t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let mapError: (<a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)), 'a => 'a) => <a href=\"./api/Future.html#type-t\">t</a>(\n  Belt.Result.t('a, 'a)\n)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-mapOk", "title": "mapOk", "contents": "mapOk t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let mapOk: (<a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)), 'a => 'a) => <a href=\"./api/Future.html#type-t\">t</a>(\n  Belt.Result.t('a, 'a)\n)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-get", "title": "get", "contents": "get t unit  unit  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Future.html#type-t\">t</a>('a), 'a => unit) => unit</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-tap", "title": "tap", "contents": "tap t unit  t  ", "rendered": "<h4 class='item'>let tap: (<a href=\"./api/Future.html#type-t\">t</a>('a), 'a => unit) => <a href=\"./api/Future.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-flatMap", "title": "flatMap", "contents": "flatMap t t  t  ", "rendered": "<h4 class='item'>let flatMap: (<a href=\"./api/Future.html#type-t\">t</a>('a), 'a => <a href=\"./api/Future.html#type-t\">t</a>('a)) => <a href=\"./api/Future.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Future.html#type-t\">t</a>('a), 'a => 'a) => <a href=\"./api/Future.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-value", "title": "value", "contents": "value t ", "rendered": "<h4 class='item'>let value: 'a => <a href=\"./api/Future.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-make", "title": "make", "contents": "make unit   t ", "rendered": "<h4 class='item'>let make: 'a => unit => 'a => <a href=\"./api/Future.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#type-t", "title": "t", "contents": "t getFn", "rendered": "<h4 class='item'>type t('a) = | Future(<a href=\"./api/Future.html#type-getFn\">getFn</a>('a))\n</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#type-getFn", "title": "getFn", "contents": "getFn unit  unit ", "rendered": "<h4 class='item'>type getFn('a) = 'a => unit => unit</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html", "title": "Future", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Future"},
{"href": "./api/Future.html", "title": "Future", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Future"},
{"href": "./api/Future.html#Future", "title": "Future", "contents": "", "rendered": "", "breadcrumb": "Future"},
{"href": "./api/FutureResult.html#value-tapError", "title": "tapError", "contents": "tapError Future t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let tapError: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => 'a\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-tapOk", "title": "tapOk", "contents": "tapOk Future t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let tapOk: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => 'a\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-flatMapError", "title": "flatMapError", "contents": "flatMapError Future t Js Result t Future t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let flatMapError: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-mapError", "title": "mapError", "contents": "mapError Future t Js Result t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let mapError: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => Js.Result.t('a, 'a)\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-flatMapOk", "title": "flatMapOk", "contents": "flatMapOk Future t Js Result t Future t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let flatMapOk: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-mapOk", "title": "mapOk", "contents": "mapOk Future t Js Result t Js Result t  Future t Js Result t  ", "rendered": "<h4 class='item'>let mapOk: (\n  <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a)),\n  'a => Js.Result.t('a, 'a)\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Js.Result.t('a, 'a))</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#value-deprecate", "title": "deprecate", "contents": "deprecate Future t string string Future t   ", "rendered": "<h4 class='item'>let deprecate: (<a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>('a), string, string) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(\n  'a\n)</h4>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html", "title": "FutureResult", "contents": "@rest", "rendered": "@rest", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html", "title": "FutureResult", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "FutureResult"},
{"href": "./api/FutureResult.html#FutureResult", "title": "FutureResult", "contents": "", "rendered": "", "breadcrumb": "FutureResult"},
{"href": "./api/FutureJs.html#value-fromPromise", "title": "fromPromise", "contents": "fromPromise Js Promise t Js Promise error  Future t Belt Result t  ", "rendered": "<h4 class='item'>let fromPromise: (\n  Js.Promise.t('a),\n  Js.Promise.error => 'a\n) => <a href=\"./api/Future.html\">Future</a>.<a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a))</h4>", "breadcrumb": "FutureJs"},
{"href": "./api/FutureJs.html", "title": "FutureJs", "contents": "@rest", "rendered": "@rest", "breadcrumb": "FutureJs"},
{"href": "./api/FutureJs.html", "title": "FutureJs", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "FutureJs"},
{"href": "./api/FutureJs.html#FutureJs", "title": "FutureJs", "contents": "", "rendered": "", "breadcrumb": "FutureJs"},
{"href": "./api/Future.html#value-tapError", "title": "tapError", "contents": "tapError t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let tapError: (<a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)), 'a => 'a) => <a href=\"./api/Future.html#type-t\">t</a>(\n  Belt.Result.t('a, 'a)\n)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-tapOk", "title": "tapOk", "contents": "tapOk t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let tapOk: (<a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)), 'a => 'a) => <a href=\"./api/Future.html#type-t\">t</a>(\n  Belt.Result.t('a, 'a)\n)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-flatMapError", "title": "flatMapError", "contents": "flatMapError t Belt Result t t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let flatMapError: (\n  <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)),\n  'a => <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a))\n) => <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a))</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-flatMapOk", "title": "flatMapOk", "contents": "flatMapOk t Belt Result t t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let flatMapOk: (\n  <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)),\n  'a => <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a))\n) => <a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a))</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-mapError", "title": "mapError", "contents": "mapError t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let mapError: (<a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)), 'a => 'a) => <a href=\"./api/Future.html#type-t\">t</a>(\n  Belt.Result.t('a, 'a)\n)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-mapOk", "title": "mapOk", "contents": "mapOk t Belt Result t  t Belt Result t  ", "rendered": "<h4 class='item'>let mapOk: (<a href=\"./api/Future.html#type-t\">t</a>(Belt.Result.t('a, 'a)), 'a => 'a) => <a href=\"./api/Future.html#type-t\">t</a>(\n  Belt.Result.t('a, 'a)\n)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-get", "title": "get", "contents": "get t unit  unit  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Future.html#type-t\">t</a>('a), 'a => unit) => unit</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-tap", "title": "tap", "contents": "tap t unit  t  ", "rendered": "<h4 class='item'>let tap: (<a href=\"./api/Future.html#type-t\">t</a>('a), 'a => unit) => <a href=\"./api/Future.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-flatMap", "title": "flatMap", "contents": "flatMap t t  t  ", "rendered": "<h4 class='item'>let flatMap: (<a href=\"./api/Future.html#type-t\">t</a>('a), 'a => <a href=\"./api/Future.html#type-t\">t</a>('a)) => <a href=\"./api/Future.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Future.html#type-t\">t</a>('a), 'a => 'a) => <a href=\"./api/Future.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-value", "title": "value", "contents": "value t ", "rendered": "<h4 class='item'>let value: 'a => <a href=\"./api/Future.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#value-make", "title": "make", "contents": "make unit   t ", "rendered": "<h4 class='item'>let make: 'a => unit => 'a => <a href=\"./api/Future.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#type-t", "title": "t", "contents": "t getFn", "rendered": "<h4 class='item'>type t('a) = | Future(<a href=\"./api/Future.html#type-getFn\">getFn</a>('a))\n</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html#type-getFn", "title": "getFn", "contents": "getFn unit  unit ", "rendered": "<h4 class='item'>type getFn('a) = 'a => unit => unit</h4>", "breadcrumb": "Future"},
{"href": "./api/Future.html", "title": "Future", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Future"},
{"href": "./api/Future.html", "title": "Future", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Future"},
{"href": "./api/Future.html#Future", "title": "Future", "contents": "", "rendered": "", "breadcrumb": "Future"}]